}
})
# Set the column names for the metadata
meta_file <- lapply(meta_file, function(df) {
if (ncol(df) > 0) {
colnames(df) <- paste0("filename", seq_len(ncol(df)))
}
return(df)
})
# Convert the list of flowFrames to a data frame of expression data outside the loop
# Handling potential empty flowFrames
seurat_dat <- lapply(sc_only, function(x) if (nrow(x@exprs) > 0) x@exprs else NULL)
seurat_dat_comb <- do.call(rbind, lapply(seurat_dat, function(x) if (!is.null(x)) x else NA))
seurat_dat_comb
# remove debris with gauss mix clustering (MCLUST) on V525.50
# select channels
all_ff_a <- lapply(all_ff_rename, channel_select)
# Remove margin events using PeacoQC's RemoveMargins()
all_fc_margin <- lapply(all_ff_a, function(x) {
tryCatch({
PeacoQC::RemoveMargins(x, channels=1:ncol(x))
}, error = function(e) {
message("RemoveMargins failed, continuing without")
x  # Return the original object on error
})
})
# QC in time using PeacoQC selecting only time parameter
all_fc_qc <- lapply(all_fc_margin, function(x) {
tryCatch({
PeacoQC::PeacoQC(x, report=FALSE, channels=c("Time"), save_fcs=FALSE)$FinalFF
}, error = function(e) {
message("PeacoQC failed, continuing without")
x  # Return the original object on error
})
})
library(mclust)
# debris removed with threshold <FSC.H/A 0.3*10^5
#all_fc_int <- lapply(all_fc_qc, function(x, threshold = 0.3*10^5){x[x@exprs[,"FSC.A"] > threshold & x@exprs[,"FSC.H"] > threshold,]})
all_fc_int <- lapply(all_fc_qc, function(x) {
tryCatch({
mdl_tmp = mclust::Mclust(x@exprs[,c("FSC.A")], G=2)
debris_clus = which.min(mdl_tmp$parameters$mean)
x = x[mdl_tmp$classification != names(debris_clus),]
x
}, error = function(e) {
message("Debris removal failed, continuing without")
#print(x)
x
})
})
# Fit a linear regression line with error handling
fits <- lapply(all_fc_int, function(x) {
tryCatch({
lm(x@exprs[, "FSC.H"] ~ x@exprs[, "FSC.A"])
}, error = function(e) {
return(NULL)  # Return NULL if lm fails
})
})
# Remove outliers and select for cell viability if 'Viability' column exists
sc_only <- lapply(seq_along(all_fc_int), function(i) {
fit <- fits[[i]]
if (is.null(fit)) {
# If the lm model is NULL, return the original flowFrame (which could be empty)
return(all_fc_int[[i]])
} else {
# Proceed with outlier removal and viability check
slope <- coef(fit)[2]
intercept <- coef(fit)[1]
remove_these <- remove_outliers(all_fc_int[[i]]@exprs[, "FSC.H"], all_fc_int[[i]]@exprs[, "FSC.A"],
slope = slope, intercept = intercept)
dat_tmp <- all_fc_int[[i]][-remove_these,]
# Check if 'Viability' column exists before applying the check
if ("Viability" %in% colnames(dat_tmp@exprs)) {
dat_tmp <- dat_tmp[dat_tmp@exprs[, "Viability"] < 2,]
}
return(dat_tmp)
}
})
# Create metadata for each file, handling potential empty flowFrames
meta_file <- lapply(seq_along(sc_only), function(i) {
if (!is.null(sc_only[[i]]) && nrow(sc_only[[i]]@exprs) > 0) {
metadata_matrix <- t(replicate(nrow(sc_only[[i]]@exprs), fn_metadata[[i]]))
data.frame(metadata_matrix)
} else {
# Return an empty data frame or NULL for empty flowFrames
return(data.frame())
}
})
# Set the column names for the metadata
meta_file <- lapply(meta_file, function(df) {
if (ncol(df) > 0) {
colnames(df) <- paste0("filename", seq_len(ncol(df)))
}
return(df)
})
# Convert the list of flowFrames to a data frame of expression data outside the loop
# Handling potential empty flowFrames
seurat_dat <- lapply(sc_only, function(x) if (nrow(x@exprs) > 0) x@exprs else NULL)
seurat_dat_comb <- do.call(rbind, lapply(seurat_dat, function(x) if (!is.null(x)) x else NA))
seurat_meta_comb <<- do.call("rbind", lapply(metafile, function(x) if (!is.null(x)) x else NA))
seurat_meta_comb <<- do.call("rbind", lapply(meta_file, function(x) if (!is.null(x)) x else NA))
seurat_meta_comb
seurat_dat_comb <- apply(seurat_dat_comb, 2, norm_minmax)
seurat_obj <- SeuratObject::CreateSeuratObject(counts=t(seurat_dat_comb), meta.data = seurat_meta_comb)
#test <- flowCore::read.FCS("~/App_benchmarking_autoflow/Mosmann_rare.fcs")
#test_dat <- data.frame(test@exprs)
#test_dat_select <- test_dat[,!(colnames(test_dat) %in% c("FSC.A", "FSC.H", "FSC.W", "SSC.A", "SSC.H",
#                                                         "SSC.W", "Live_Dead", "Time", "label"))]
#test_cluster <- run_unsupervised(test_dat_select)
cluster_dat <- run_unsupervised(seurat_obj, res=as.numeric(input$res_umap), logfold=as.numeric(input$lf_umap))
seurat_meta_comb
dim(seurat_meta_comb)
dim(seurat_dat_comb)
meta_file
seurat_meta_comb <<- do.call("rbind", lapply(meta_file, function(x) if (!is.null(x)) x else NA))
seurat_meta_comb
dim(seurat_meta_comb)
dim(seurat_dat_comb)
# Create metadata for each file, handling potential empty flowFrames
meta_file <- lapply(seq_along(sc_only), function(i) {
if (!is.null(sc_only[[i]]) && nrow(sc_only[[i]]@exprs) > 0) {
metadata_matrix <- t(replicate(nrow(sc_only[[i]]@exprs), fn_metadata[[i]]))
data.frame(metadata_matrix)
} else {
# Return an empty data frame or NULL for empty flowFrames
return(data.frame())
}
})
# Set the column names for the metadata
meta_file <- lapply(meta_file, function(df) {
if (ncol(df) > 0) {
colnames(df) <- paste0("filename", seq_len(ncol(df)))
}
return(df)
})
# Convert the list of flowFrames to a data frame of expression data outside the loop
# Handling potential empty flowFrames
seurat_dat <- lapply(sc_only, function(x) if (nrow(x@exprs) > 0) x@exprs else NULL)
seurat_dat_comb <- do.call(rbind, lapply(seurat_dat, function(x) if (!is.null(x)) x else NA))
seurat_meta_comb <<- do.call("rbind", lapply(meta_file, function(x) if (!is.null(x)) x else NA))
#seurat_meta_comb$proliferation <- edu_binary
rownames(seurat_dat_comb) <- rownames(seurat_meta_comb,)
seurat_meta_comb
seurat_dat_comb
# Fit a linear regression line with error handling
fits <- lapply(all_fc_int, function(x) {
tryCatch({
lm(x@exprs[, "FSC.H"] ~ x@exprs[, "FSC.A"])
}, error = function(e) {
return(NULL)  # Return NULL if lm fails
})
})
# Remove outliers and select for cell viability if 'Viability' column exists
sc_only <- lapply(seq_along(all_fc_int), function(i) {
fit <- fits[[i]]
if (is.null(fit)) {
# If the lm model is NULL, return the original flowFrame (which could be empty)
return(all_fc_int[[i]])
} else {
# Proceed with outlier removal and viability check
slope <- coef(fit)[2]
intercept <- coef(fit)[1]
remove_these <- remove_outliers(all_fc_int[[i]]@exprs[, "FSC.H"], all_fc_int[[i]]@exprs[, "FSC.A"],
slope = slope, intercept = intercept)
dat_tmp <- all_fc_int[[i]][-remove_these,]
# Check if 'Viability' column exists before applying the check
if ("Viability" %in% colnames(dat_tmp@exprs)) {
dat_tmp <- dat_tmp[dat_tmp@exprs[, "Viability"] < 2,]
}
return(dat_tmp)
}
})
# Assuming fn_metadata is defined elsewhere and is a list with metadata for each flowFrame
# Create a combined metadata and data frame, ensuring matching rows
seurat_comb <- lapply(seq_along(sc_only), function(i) {
# Extract expression data
expr_data <- if (nrow(sc_only[[i]]@exprs) > 0) sc_only[[i]]@exprs else NULL
# Create metadata only if expression data is not NULL
if (!is.null(expr_data)) {
# Generate metadata dataframe with the correct number of rows
metadata_matrix <- t(replicate(nrow(expr_data), fn_metadata[[i]]))
metadata_df <- data.frame(metadata_matrix)
colnames(metadata_df) <- paste0("filename", seq_len(ncol(metadata_df)))
# Combine expression data and metadata
combined_df <- cbind(metadata_df, expr_data)
return(combined_df)
} else {
# Return an empty data frame for empty flowFrames
return(data.frame())
}
})
# Bind all the combined data frames together
seurat_comb_dat <- do.call(rbind, seurat_comb)
# You can now extract the metadata and data into separate data frames if needed
seurat_meta_comb <- seurat_comb_dat[, grep("filename", colnames(seurat_comb_dat))]
seurat_dat_comb <- seurat_comb_dat[, !grepl("filename", colnames(seurat_comb_dat))]
seurat_dat_comb
dim(seurat_dat_comb)
dim(seurat_meta_comb)
seurat_meta_comb
seurat_dat_comb <- apply(seurat_dat_comb, 2, norm_minmax)
seurat_obj <- SeuratObject::CreateSeuratObject(counts=t(seurat_dat_comb), meta.data = seurat_meta_comb)
#test <- flowCore::read.FCS("~/App_benchmarking_autoflow/Mosmann_rare.fcs")
#test_dat <- data.frame(test@exprs)
#test_dat_select <- test_dat[,!(colnames(test_dat) %in% c("FSC.A", "FSC.H", "FSC.W", "SSC.A", "SSC.H",
#                                                         "SSC.W", "Live_Dead", "Time", "label"))]
#test_cluster <- run_unsupervised(test_dat_select)
cluster_dat <- run_unsupervised(seurat_obj, res=as.numeric(input$res_umap), logfold=as.numeric(input$lf_umap))
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
#
files <- list.files(path="~/2024-1/D0 05022024/Sample plate/", full.names=TRUE, pattern=".fcs")
files <- files[files %like% "Samples "]
library(data.table)
files <- files[files %like% "Samples "]
# Attempt to read in with flowCore
all_read <- sapply(files, function(x){tryCatch(flowCore::read.FCS(x, alter.names = TRUE, transformation = NULL))})
# extract file name folders for metadata
fn_metadata <- stringr::str_split(files, "/")
all_read
all_read[[1]]@description
all_read[[1]]@description$`WELL ID`
fn_metadata
files
# extract file name folders for metadata
# add wells
wells <- lapply(all_read, function(x) x@description$"WELL ID")
wells
files_add <- paste(files, wells, sep="/")
files_add
fn_metadata <- stringr::str_split(files_add, "/")
fn_metadata
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(flowStats)
test1 <- list.files("~/FCM_historic_fcsonly/2019_3/Results/D0 2-4-19/FCS Files/", pattern=".fcs", full.names=TRUE)
test2 <- lapply(test1[test1 %like% "Test"], flowCore::read.FCS)
test3 <- test2[[1]]
test3@description$GUID
params<-parameters(test3)[["desc"]]
colnames(test3)[!is.na(params)] <- na.omit(params)
colnames(test3) <- pData(parameters(test3))[,"desc"]
markernames(test3)
library(data.table)
library(flowCore)
test1 <- list.files("~/FCM_historic_fcsonly/2019_3/Results/D0 2-4-19/FCS Files/", pattern=".fcs", full.names=TRUE)
test2 <- lapply(test1[test1 %like% "Test"], flowCore::read.FCS)
test3 <- test2[[1]]
test3@description$GUID
params<-parameters(test3)[["desc"]]
colnames(test3)[!is.na(params)] <- na.omit(params)
colnames(test3) <- pData(parameters(test3))[,"desc"]
markernames(test3)
exprs(test3)
keyword_fcs <- lapply(test2, function(x){
t(data.frame(keyword(x))[1,])
})
fn_metadata <- stringr::str_split(test2, "/")
meta_df <- lapply(fn_metadata, as.data.frame)
meta_comb <- list()
for (i in 1:length(meta_df)){
colnames(meta_df[[i]]) <- "metadata"
colnames(keyword_fcs[[i]]) <- "metadata"
meta_comb[[i]] <- rbind(meta_df[[i]], keyword_fcs[[i]])
}
test2
fn_metadata <- stringr::str_split(test1[test1 %like% "Test"], "/")
meta_df <- lapply(fn_metadata, as.data.frame)
meta_comb <- list()
for (i in 1:length(meta_df)){
colnames(meta_df[[i]]) <- "metadata"
colnames(keyword_fcs[[i]]) <- "metadata"
meta_comb[[i]] <- rbind(meta_df[[i]], keyword_fcs[[i]])
}
lapply(meta_comb, dim)
meta_comb[[1]]
meta_comb[[1]][1,]
meta_comb[[1]][2,]
meta_comb[[1]][4,]
meta_comb[[1]][5,]
meta_comb[[1]][7,]
rownamets(meta_comb[[1]])
rownames(meta_comb[[1]])
rownames(meta_comb[[1]]) %like% "Tube"
rownames(meta_comb[[1]])[rownames(meta_comb[[1]]) %like% "Tube"]
test3@description
rownames(meta_comb[[1]])[rownames(meta_comb[[1]]) %like% "TUBE"]
rownames(meta_comb[[1]])[rownames(meta_comb[[1]]) %like% "WELL"]
sub("file_(\\d{4}_\\d+).*", "\\1", meta_comb[[1]])
meta_comb
#Define the pattern to look for
pattern <- "\\b\\d{4}_\\d+\\b" # \b is a word boundary to ensure we match the whole pattern
# Find the index of the metadata row that contains the pattern
metadata_with_pattern <- grep(pattern, meta_comb[[1]]$metadata, value = TRUE)
metadata_with_pattern
keyword_fcs
meta_comb
lapply(meta_comb, dim)
meta_comb <- list()
for (i in 1:length(meta_df)){
colnames(meta_df[[i]]) <- "metadata"
colnames(keyword_fcs[[i]]) <- "metadata"
meta_comb[[i]] <- as.data.frame(t(rbind(meta_df[[i]], keyword_fcs[[i]])))
}
lapply(meta_comb, dim)
test = "Samples21-40_D6_D06_041.fcs"
str_detect(test, "D\\d{2}")
stringr::str_detect(test, "D\\d{2}")
stringr::str_extract(test, "D\\d{2}")
params <- parameters(test2[[1]])[["desc"]]
library(flowCore)
params <- parameters(test2[[1]])[["desc"]]
test1 <- list.files("~/FCM_historic_fcsonly/2019_3/Results/D0 2-4-19/FCS Files/", pattern=".fcs", full.names=TRUE)
test2 <- lapply(test1[test1 %like% "Test"], flowCore::read.FCS)
test3 <- test2[[1]]
test3@description$GUID
params<-parameters(test3)[["desc"]]
library((data.table))
library(data.table)
test2 <- lapply(test1[test1 %like% "Test"], flowCore::read.FCS)
test3 <- test2[[1]]
test3@description$GUID
params<-parameters(test3)[["desc"]]
params
colnames(test3)
na.omit(params)
colnames(test3)[!is.na(params)] <- na.omit(params)
test3
pData(parameters(test3))[,"desc"]
markernames(test3)
# Example data
all_fc_margin <- list(
list("fc_margin_1a", "fc_margin_1b"),
list("fc_margin_2a", "fc_margin_2b")
)
meta_comb <- list(
list("meta_1a", "meta_1b"),
list("meta_2a", "meta_2b")
)
# Initialize the output list
out_obj <- list()
# Combine corresponding elements from all_fc_margin and meta_comb
for (i in 1:length(all_fc_margin)) {
out_obj[[i]] <- list(all_fc_margin[[i]], meta_comb[[i]])
}
# Access the elements
for (i in 1:length(out_obj)) {
print(paste("all_fc_margin for out_obj[[", i, "]]:"))
print(out_obj[[i]][[1]])
print(paste("meta_comb for out_obj[[", i, "]]:"))
print(out_obj[[i]][[2]])
}
out_obj
out_obj[[1]]
# Example data
all_fc_margin <-
list("fc_margin_1a", "fc_margin_1b")
meta_comb <-
list("meta_1a", "meta_1b")
# Initialize the output list
out_obj <- list()
# Combine corresponding elements from all_fc_margin and meta_comb
for (i in 1:length(all_fc_margin)) {
out_obj[[i]] <- list(all_fc_margin[[i]], meta_comb[[i]])
}
# Access the elements
for (i in 1:length(out_obj)) {
print(paste("all_fc_margin for out_obj[[", i, "]]:"))
print(out_obj[[i]][[1]])
print(paste("meta_comb for out_obj[[", i, "]]:"))
print(out_obj[[i]][[2]])
}
out_obj
out_obj[[1]]
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
